{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import random\n",
    "import math\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "def prob1(N, n, mu, sigma):\n",
    "    # Creates standard distribution\n",
    "    B = np.random.randn(N) * sigma + mu\n",
    "    \n",
    "    xbarList = []\n",
    "    for i in range(1, n+1):\n",
    "        # Gets i random indices from 1,500,000\n",
    "        ind = random.sample(range(N), i)\n",
    "\n",
    "        S = B[ind]\n",
    "        xbar = np.mean(S)\n",
    "        xbarList.append(xbar)\n",
    "\n",
    "    plt.figure(1)\n",
    "    plt.scatter(range(n), xbarList, c='b', marker='x')\n",
    "    \n",
    "    top95 = [mu + 1.96*(sigma/math.sqrt(i)) if i > 0\n",
    "            else float('inf')\n",
    "           for i in range(0,n)]\n",
    "    bot95 = [mu - 1.96*(sigma/math.sqrt(i)) if i > 0\n",
    "            else float('inf')\n",
    "           for i in range(0,n)]\n",
    "    plt.plot(range(n),top95,'r')\n",
    "    plt.plot(range(n),bot95,'r')\n",
    "    plt.show()\n",
    "    \n",
    "    plt.figure(2)\n",
    "    plt.scatter(range(n), xbarList, c='b', marker='x')\n",
    "    \n",
    "    top99 = [mu + 2.58*(sigma/math.sqrt(i)) if i > 0\n",
    "            else float('inf')\n",
    "           for i in range(0,n)]\n",
    "    bot99 = [mu - 2.58*(sigma/math.sqrt(i)) if i > 0\n",
    "            else float('inf')\n",
    "           for i in range(0,n)]\n",
    "    plt.plot(range(n),top99,'g')\n",
    "    plt.plot(range(n),bot99,'g')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1166510>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xfec450>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "prob1(1500000, 200, 50, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getMean(x):\n",
    "    mean = np.mean(x)\n",
    "#     print(mean)\n",
    "    return mean\n",
    "def getSD(x):\n",
    "    sd = np.std(x, ddof=1)\n",
    "    \n",
    "#     print(sd)\n",
    "    return sd\n",
    "\n",
    "def getNBounds(n, xbar, sd, confidence):\n",
    "    return [\n",
    "            xbar - confidence*(sd/math.sqrt(n)),\n",
    "            xbar + confidence*(sd/math.sqrt(n))\n",
    "            ]\n",
    "def getTBounds(n, xbar, sd, t):\n",
    "    return [\n",
    "            xbar - t*(sd/math.sqrt(n)),\n",
    "            xbar + t*(sd/math.sqrt(n))\n",
    "            ]\n",
    "\n",
    "def prob2(N, n, confidence, t, mu, sigma):\n",
    "    # Creates standard distribution\n",
    "    B = np.random.randn(N) * sigma + mu\n",
    "    \n",
    "    normalSuccessCount = 0;\n",
    "    tSuccessCount = 0;\n",
    "    \n",
    "    for i in range(10000):\n",
    "        # Gets i random indices from 1,500,000\n",
    "        ind = random.sample(range(N), n)\n",
    "\n",
    "        # Get sample mu, sigma\n",
    "        sample = B[ind]\n",
    "        xbar = getMean(sample)\n",
    "        sd = getSD(sample)\n",
    "\n",
    "        nBounds = getNBounds(n, xbar, sd, confidence)\n",
    "        if nBounds[0] <= mu <= nBounds[1]:\n",
    "            normalSuccessCount = normalSuccessCount+1\n",
    "            \n",
    "        tBounds = getTBounds(n, xbar, sd, t)\n",
    "        if tBounds[0] <= mu <= tBounds[1]:\n",
    "            tSuccessCount = tSuccessCount+1\n",
    "    \n",
    "    print(\"----n = \", n)\n",
    "    \n",
    "    print(\"Normal\")\n",
    "    print(normalSuccessCount/10000)\n",
    "    \n",
    "    print(\"T\")\n",
    "    print(tSuccessCount/10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----n =  5\n",
      "Normal\n",
      "0.875\n",
      "T\n",
      "0.95\n"
     ]
    }
   ],
   "source": [
    "prob2(1500000, 5, 1.96, 2.78, 50, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----n =  5\n",
      "Normal\n",
      "0.9426\n",
      "T\n",
      "0.991\n"
     ]
    }
   ],
   "source": [
    "prob2(1500000, 5, 2.58, 4.6, 50, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----n =  40\n",
      "Normal\n",
      "0.9428\n",
      "T\n",
      "0.9503\n"
     ]
    }
   ],
   "source": [
    "prob2(1500000, 40, 1.96, 2.02, 50, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----n =  40\n",
      "Normal\n",
      "0.9866\n",
      "T\n",
      "0.9891\n"
     ]
    }
   ],
   "source": [
    "prob2(1500000, 40, 2.58, 2.7, 50, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----n =  120\n",
      "Normal\n",
      "0.9489\n",
      "T\n",
      "0.9508\n"
     ]
    }
   ],
   "source": [
    "prob2(1500000, 120, 1.96, 1.98, 50, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----n =  120\n",
      "Normal\n",
      "0.9883\n",
      "T\n",
      "0.9892\n"
     ]
    }
   ],
   "source": [
    "prob2(1500000, 120, 2.58, 2.62, 50, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
